// transform, cmdline "--frr --fcf"

CASM lr

init foo

rule foo =
{
    let x = 10 in
    {
        print x
    }

    let x = 10 in
    {
        print x
    }

    let x = 10 in
    {
        print x
    }

    program(self) := undef
}


// step0: lr
// rule foo =
// {
//     __l0 := 10 
//     print __l0
//
//     __l1 := 10 
//     print __l1
//
//     __l2 := 10 
//     print __l2
//     program(self) := undef
// }

// step1: lr.cf
// rule foo =
// {
//     __c0 =: 10
//
//     __l0 := 10 
//     print __c0
//
//     __l1 := 10 
//     print __c0
//
//     __l2 := 10 
//     print __c0
//
//     program(self) := undef
// }

// step2: lr.cf.cp
// rule foo =
// {
//     __c0 =: 10
//
//     __l0 := __c0 
//     print __l0
//
//     __l1 := __c0 
//     print __l1
//
//     __l2 := __c0 
//     print __l2
//
//     program(self) := undef
// }

// step3: lr.cf.cp.cp
// rule foo =
// {
//     __c0 =: 10
//
//     print __c0
//
//     print __c0
//
//     print __c0
//
//     program(self) := undef
// }




