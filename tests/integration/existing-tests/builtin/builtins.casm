CASM symbolic

function a: -> List(Int)
function b: -> List(Int)

init main

rule main = seqblock
    assert len([]) = 0
    assert len([1]) = 1
    assert len([1,2]) = 2
    assert len([1,2,3]) = 3
    assert len([1..1]) = 1
    assert len([2..1]) = 2
    assert len([1..2]) = 2
    assert len([-1..1]) = 3
    assert len([1..-1]) = 3
    assert len([1..10]) = 10
    assert len( b ) = undef
    assert len( undef ) = undef

    assert nth([0,1,2],1) = 0
    assert nth([0,1,2],2) = 1
    assert nth([0,1,2],3) = 2
    assert nth([-1..1],1) = -1
    assert nth([-1..1],2) = 0
    assert nth([-1..1],3) = 1
    assert nth( b, 1 ) = undef
    assert nth( [ 1,2 ], undef ) = undef
    assert nth( undef, 2 ) = undef

    assert peek( [0,1,2] ) = 0
    assert peek( [ "a", "b", "c" ] ) = "a"
    assert peek( [1] ) = 1
    assert peek( b ) = undef
    assert peek( undef ) = undef

    assert cons( undef, [1,2,3] ) = [undef,1,2,3]
    assert cons( undef, [] ) = [undef]
    assert cons( [1], [] ) = [[1]]
    assert cons( [], [] ) = [[]]
    assert cons( 1, b ) = undef
    assert cons( 1, undef ) = undef
    assert cons( 1, cons(2, cons(3, []))) = [1,2,3]
/*
    assert app( [1,2,3], undef ) = [1,2,3,undef]
    assert app( [], undef ) = [undef]
    // XXX typ system can not handle this -> investigate 
    // assert app( [], [1] ) =  [[1]]
    // assert app( [], [] ) = [[]]
    assert app( b, 1 ) = undef
    assert app( undef, 1) = undef
    assert app( app( app([],1) ,2), 3) = [1,2,3]
*/

    a := [ 1, 2, 3 ]
    assert tail( a ) = [2,3]
    assert tail( b ) = undef
    assert tail( undef ) = undef
    assert tail( [] ) = []
    assert tail( [1] ) = []
    assert tail( [1,2] ) = [2]
    assert tail( [1,2,3] ) = [2,3]
    assert tail( [1,2,3,4] ) = [2,3,4]

    assert pow(2,1) = 2
    assert pow(2,2) = 4
    assert pow(2,0) = 1
    assert pow(0,0) = 1
    assert pow(-2,2) = 4
    assert pow(-2,3) = -8
    assert pow(2,3) = 8
    assert pow(2,16) = 65536
    //assert pow(2,32) = 4294967296 casmi seems to implement 32 bit interger arithmetic after all, eek. want 64 bit ...

    program(self) := undef
endseqblock
